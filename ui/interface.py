import calendar
from rich.console import Console
from rich.table import Table
from rich.prompt import Prompt, IntPrompt
from rich.panel import Panel
from datetime import datetime
from core.task_manager import TaskManager
from core.weather_service import WeatherService
from core.calendar_manager import CalendarManager
from core.game_manager import TicTacToe, SimpleTetris
from core.password_generator import PasswordGenerator


class ShoriextUI:
    def __init__(self):
        self.console = Console()
        self.task_manager = TaskManager()
        self.weather_service = WeatherService()
        self.calendar_manager = CalendarManager()
        self.password_generator = PasswordGenerator()

    def show_ascii_art(self):
        ascii_art = r"""
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïù‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó   ‚ïö‚ñà‚ñà‚ñà‚ïî‚ïù    ‚ñà‚ñà‚ïë   
‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù   ‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïë   
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïë   
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù      
        """
        self.console.print(ascii_art, style="bold blue")
        self.console.print("=" * 70, style="bold blue")
        self.console.print(
            "üéØ shoriext - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å–æ–ª—å–Ω–∞—è —É—Ç–∏–ª–∏—Ç–∞", style="cyan"
        )
        self.console.print("=" * 70, style="bold blue")
        self.console.print("")

    def clear_screen(self):
        self.console.clear()

    def show_main_menu(self):
        self.show_ascii_art()
        self.console.print(
            Panel("[bold blue]üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é shoriext[/bold blue]", expand=False)
        )
        self.console.print("1. üìã –¢—Ä–µ–∫–µ—Ä –∑–∞–¥–∞—á")
        self.console.print("2. üå§Ô∏è  –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã (–ú–æ—Å–∫–≤–∞)")
        self.console.print("3. üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å")
        self.console.print("4. üéÆ –ò–≥—Ä—ã")
        self.console.print("5. üîê –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π")
        self.console.print("0. üö™ –í—ã–π—Ç–∏")
        self.console.print("")

    # ==================== Task Tracker ====================
    def show_task_tracker_menu(self):
        while True:
            self.clear_screen()
            self.console.print(
                Panel("[bold green]üìã –¢—Ä–µ–∫–µ—Ä –∑–∞–¥–∞—á[/bold green]", expand=False)
            )
            self.console.print("1. üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏")
            self.console.print("2. ‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É")
            self.console.print("3. ‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å")
            self.console.print("4. üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            self.console.print("5. üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∑–∞–¥–∞—á—É")
            self.console.print("6. üóëÔ∏è  –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")
            self.console.print("0. üîô –ù–∞–∑–∞–¥")

            choice = Prompt.ask(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", choices=["0", "1", "2", "3", "4", "5", "6"]
            )

            if choice == "0":
                break
            elif choice == "1":
                self.show_tasks()
            elif choice == "2":
                self.add_task()
            elif choice == "3":
                self.increment_task()
            elif choice == "4":
                self.show_task_statistics()
            elif choice == "5":
                self.reset_task()
            elif choice == "6":
                self.remove_task()

            if choice != "0":
                Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

    def show_tasks(self):
        tasks = self.task_manager.get_all_tasks()
        if not tasks:
            self.console.print("[yellow]–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á[/yellow]")
            return

        table = Table(
            title="üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏", show_header=True, header_style="bold magenta"
        )
        table.add_column("–ù–∞–∑–≤–∞–Ω–∏–µ", style="cyan")
        table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="white")
        table.add_column("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", style="yellow")
        table.add_column("–ü—Ä–æ–≥—Ä–µ—Å—Å", style="green")
        table.add_column("–°—Ç–∞—Ç—É—Å", style="blue")

        for task in tasks:
            progress_text = f"{task.current_count}/{task.target_count}"
            priority_style = {"low": "green", "medium": "yellow", "high": "red"}.get(
                task.priority, "white"
            )
            priority_text = f"[{priority_style}]{task.priority}[/{priority_style}]"

            if task.completed_at:
                status = "[green]‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ[/green]"
            else:
                status = "[blue]‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ[/blue]"

            table.add_row(
                task.name, task.description or "-", priority_text, progress_text, status
            )

        self.console.print(table)

    def add_task(self):
        self.console.print("\n[bold]‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏[/bold]")
        name = Prompt.ask("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
        if not name:
            self.console.print("[red]–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º![/red]")
            return

        if not self.task_manager.add_task(name):
            self.console.print("[red]–ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç![/red]")
            return

        description = Prompt.ask("–û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", default="")
        target_count = IntPrompt.ask("–¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", default=1)
        priority = Prompt.ask(
            "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (low/medium/high)",
            choices=["low", "medium", "high"],
            default="medium",
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        task = self.task_manager.get_task(name)
        task.description = description
        task.target_count = target_count
        task.priority = priority
        self.task_manager.save_data()

        self.console.print("[green]‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞![/green]")

    def increment_task(self):
        tasks = self.task_manager.get_all_tasks()
        if not tasks:
            self.console.print("[yellow]–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞[/yellow]")
            return

        self.console.print("\n[bold]–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:[/bold]")
        for i, task in enumerate(tasks, 1):
            status = "‚úÖ" if task.completed_at else "‚è≥"
            self.console.print(f"{i}. {status} {task.name}")

        try:
            choice = IntPrompt.ask(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏",
                choices=[str(i) for i in range(1, len(tasks) + 1)],
            )
            selected_task = tasks[choice - 1]

            if selected_task.increment():
                self.console.print("[green]‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç–º–µ—á–µ–Ω![/green]")
                if selected_task.completed_at:
                    self.console.print(
                        f"[bold green]üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ó–∞–¥–∞—á–∞ '{selected_task.name}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞![/bold green]"
                    )
            else:
                self.console.print("[yellow]–≠—Ç–∞ –∑–∞–¥–∞—á–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞![/yellow]")

        except (ValueError, IndexError):
            self.console.print("[red]–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä[/red]")

    def show_task_statistics(self):
        stats = self.task_manager.get_statistics()
        tasks = self.task_manager.get_all_tasks()

        table = Table(title="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á", show_header=False)
        table.add_row("–í—Å–µ–≥–æ –∑–∞–¥–∞—á", str(stats["total_tasks"]))
        table.add_row("–ó–∞–≤–µ—Ä—à–µ–Ω–æ", str(stats["completed_tasks"]))
        table.add_row("–í –ø—Ä–æ—Ü–µ—Å—Å–µ", str(stats["in_progress_tasks"]))
        table.add_row("–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å", stats["overall_progress"])

        self.console.print(table)

        if tasks:
            self.console.print("\n[bold]–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å:[/bold]")
            for task in tasks:
                self.console.print(f"\n[cyan]{task.name}[/cyan]")
                progress_percentage = (
                    (task.current_count / task.target_count) * 100
                    if task.target_count > 0
                    else 0
                )
                progress_bar = "‚ñà" * int(progress_percentage // 5) + "‚ñë" * (
                    20 - int(progress_percentage // 5)
                )
                status = "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ" if task.completed_at else "‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ"
                self.console.print(f"  [{progress_bar}] {progress_percentage:.1f}%")
                self.console.print(
                    f"  {task.current_count}/{task.target_count} | {status}"
                )

    def reset_task(self):
        tasks = self.task_manager.get_all_tasks()
        if not tasks:
            self.console.print("[yellow]–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —Å–±—Ä–æ—Å–∞[/yellow]")
            return

        self.console.print("\n[bold]–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —Å–±—Ä–æ—Å–∞:[/bold]")
        for i, task in enumerate(tasks, 1):
            self.console.print(f"{i}. üîÑ {task.name}")

        try:
            choice = IntPrompt.ask(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏",
                choices=[str(i) for i in range(1, len(tasks) + 1)],
            )
            selected_task = tasks[choice - 1]

            confirm = Prompt.ask(
                f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å '{selected_task.name}'? (y/N)",
                default="n",
            )
            if confirm.lower() == "y":
                self.task_manager.reset_task(selected_task.name)
                self.console.print("[green]‚úÖ –ó–∞–¥–∞—á–∞ —Å–±—Ä–æ—à–µ–Ω–∞![/green]")
            else:
                self.console.print("[yellow]–°–±—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω[/yellow]")

        except (ValueError, IndexError):
            self.console.print("[red]–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä[/red]")

    def remove_task(self):
        tasks = self.task_manager.get_all_tasks()
        if not tasks:
            self.console.print("[yellow]–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è[/yellow]")
            return

        self.console.print("\n[bold]–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:[/bold]")
        for i, task in enumerate(tasks, 1):
            status = "‚úÖ" if task.completed_at else "‚è≥"
            self.console.print(f"{i}. {status} {task.name}")

        try:
            choice = IntPrompt.ask(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏",
                choices=[str(i) for i in range(1, len(tasks) + 1)],
            )
            selected_task = tasks[choice - 1]

            confirm = Prompt.ask(
                f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å '{selected_task.name}'? (y/N)",
                default="n",
            )
            if confirm.lower() == "y":
                self.task_manager.remove_task(selected_task.name)
                self.console.print("[green]‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞![/green]")
            else:
                self.console.print("[yellow]–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ[/yellow]")

        except (ValueError, IndexError):
            self.console.print("[red]–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä[/red]")

    # ==================== Weather ====================
    def show_weather(self):
        self.clear_screen()
        self.console.print(
            Panel("[bold yellow]üå§Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ –ú–æ—Å–∫–≤–µ[/bold yellow]", expand=False)
        )

        try:
            forecast = self.weather_service.get_moscow_weather_forecast()

            table = Table(
                title="–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é", show_header=True, header_style="bold blue"
            )
            table.add_column("–î–∞—Ç–∞", style="cyan")
            table.add_column("–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏", style="white")
            table.add_column("–ü–æ–≥–æ–¥–∞", style="yellow")
            table.add_column("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", style="green")
            table.add_column("–°–µ–≥–æ–¥–Ω—è", style="red")

            for day in forecast:
                today_mark = "‚úì" if day["is_today"] else ""
                temp_range = f"{day['temp_min']}¬∞C / {day['temp_max']}¬∞C"

                table.add_row(
                    day["date"],
                    day["day_of_week"],
                    day["condition"],
                    temp_range,
                    today_mark,
                )

            self.console.print(table)

        except Exception as e:
            self.console.print(f"[red]–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {e}[/red]")

        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

    # ==================== Calendar ====================
    def show_calendar_menu(self):
        while True:
            self.clear_screen()
            self.console.print(
                Panel("[bold magenta]üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å[/bold magenta]", expand=False)
            )
            self.console.print("1. üìÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è")
            self.console.print("2. üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è")
            self.console.print("3. ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ")
            self.console.print("4. üóëÔ∏è  –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ")
            self.console.print("5. üîÆ –ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è")
            self.console.print("0. üîô –ù–∞–∑–∞–¥")

            choice = Prompt.ask(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", choices=["0", "1", "2", "3", "4", "5"]
            )

            if choice == "0":
                break
            elif choice == "1":
                self.show_calendar_view()
            elif choice == "2":
                self.show_calendar_events()
            elif choice == "3":
                self.add_calendar_event()
            elif choice == "4":
                self.remove_calendar_event()
            elif choice == "5":
                self.show_upcoming_events()

            if choice != "0":
                Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

    def show_calendar_events(self):
        events = self.calendar_manager.events
        if not events:
            self.console.print("[yellow]–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π[/yellow]")
            return

        table = Table(
            title="üìÖ –í—Å–µ —Å–æ–±—ã—Ç–∏—è", show_header=True, header_style="bold magenta"
        )
        table.add_column("–î–∞—Ç–∞", style="cyan")
        table.add_column("–ù–∞–∑–≤–∞–Ω–∏–µ", style="white")
        table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="green")
        table.add_column("–¢–∏–ø", style="yellow")

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –¥–∞—Ç–µ
        sorted_events = sorted(events, key=lambda x: x.date)

        for event in sorted_events:
            event_type_style = {
                "personal": "blue",
                "work": "red",
                "holiday": "green",
            }.get(event.event_type, "white")
            type_text = f"[{event_type_style}]{event.event_type}[/{event_type_style}]"

            table.add_row(event.date, event.title, event.description or "-", type_text)

        self.console.print(table)

    def add_calendar_event(self):
        self.console.print("\n[bold]‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è[/bold]")
        title = Prompt.ask("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è")
        if not title:
            self.console.print("[red]–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º![/red]")
            return

        date = Prompt.ask("–î–∞—Ç–∞ (–ì–ì–ì–ì-–ú–ú-–î–î)")
        description = Prompt.ask("–û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", default="")
        event_type = Prompt.ask(
            "–¢–∏–ø —Å–æ–±—ã—Ç–∏—è", choices=["personal", "work", "holiday"], default="personal"
        )

        try:
            self.calendar_manager.add_event(title, date, description, event_type)
            self.console.print("[green]‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ![/green]")
        except Exception as e:
            self.console.print(f"[red]–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}[/red]")

    def remove_calendar_event(self):
        events = self.calendar_manager.events
        if not events:
            self.console.print("[yellow]–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è[/yellow]")
            return

        self.console.print("\n[bold]–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:[/bold]")
        for i, event in enumerate(events, 1):
            self.console.print(f"{i}. {event.date} - {event.title}")

        try:
            choice = IntPrompt.ask(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–æ–±—ã—Ç–∏—è",
                choices=[str(i) for i in range(1, len(events) + 1)],
            )
            selected_event = events[choice - 1]

            confirm = Prompt.ask(
                f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å '{selected_event.title}'? (y/N)",
                default="n",
            )
            if confirm.lower() == "y":
                self.calendar_manager.remove_event(
                    selected_event.title, selected_event.date
                )
                self.console.print("[green]‚úÖ –°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ![/green]")
            else:
                self.console.print("[yellow]–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ[/yellow]")

        except (ValueError, IndexError):
            self.console.print("[red]–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä[/red]")

    def show_upcoming_events(self):
        upcoming = self.calendar_manager.get_upcoming_events(7)
        if not upcoming:
            self.console.print("[yellow]–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π[/yellow]")
            return

        self.console.print("\n[bold]üîÆ –°–æ–±—ã—Ç–∏—è –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π:[/bold]")
        table = Table(show_header=True, header_style="bold blue")
        table.add_column("–î–∞—Ç–∞", style="cyan")
        table.add_column("–ù–∞–∑–≤–∞–Ω–∏–µ", style="white")
        table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="green")

        for event in upcoming:
            table.add_row(event.date, event.title, event.description or "-")

        self.console.print(table)

    def show_calendar_view(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å"""
        today = datetime.now()
        year = today.year
        month = today.month

        while True:
            self.clear_screen()
            self.console.print(
                Panel(
                    f"[bold blue]üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å - {self.get_month_name(month)} {year}[/bold blue]",
                    expand=False,
                )
            )

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
            self.display_month_calendar(year, month)

            self.console.print("\n[bold]–ù–∞–≤–∏–≥–∞—Ü–∏—è:[/bold]")
            self.console.print("‚Üê ‚Üí : –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–µ–≤")
            self.console.print("Enter: –í—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å")
            self.console.print("0: –ù–∞–∑–∞–¥")

            nav_choice = Prompt.ask(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", choices=["0", "1", "2", "enter"]
            )

            if nav_choice == "0":
                break
            elif nav_choice == "1":
                # –ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
                if month == 1:
                    month = 12
                    year -= 1
                else:
                    month -= 1
            elif nav_choice == "2":
                # –°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
                if month == 12:
                    month = 1
                    year += 1
                else:
                    month += 1
            elif nav_choice == "enter":
                self.select_day_events(year, month)

    def display_month_calendar(self, year: int, month: int):
        """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –º–µ—Å—è—Ü–∞"""
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        events_dict = self.calendar_manager.get_events_for_calendar(year, month)

        # –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        cal = calendar.monthcalendar(year, month)

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        days_header = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
        self.console.print(" ".join(f"[bold]{day:2}[/bold]" for day in days_header))

        today = datetime.now()

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–µ–¥–µ–ª–∏
        for week in cal:
            week_str = ""
            for i, day in enumerate(week):
                if day == 0:
                    week_str += "   "
                else:
                    date_str = f"{year}-{month:02d}-{day:02d}"
                    has_events = date_str in events_dict

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º –¥–Ω–µ–º
                    is_today = (
                        year == today.year and month == today.month and day == today.day
                    )

                    if is_today:
                        day_str = f"[bold red]{day:2}[/bold red]"
                    elif has_events:
                        day_str = f"[bold yellow]{day:2}[/bold yellow]"
                    else:
                        day_str = f"{day:2}"

                    week_str += day_str + " "

            self.console.print(week_str)

        # –õ–µ–≥–µ–Ω–¥–∞
        self.console.print("\n[bold]–õ–µ–≥–µ–Ω–¥–∞:[/bold]")
        self.console.print("[red]‚óè[/red] –°–µ–≥–æ–¥–Ω—è")
        self.console.print("[yellow]‚óè[/yellow] –ï—Å—Ç—å —Å–æ–±—ã—Ç–∏—è")

    def get_month_name(self, month: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º"""
        months = {
            1: "–Ø–Ω–≤–∞—Ä—å",
            2: "–§–µ–≤—Ä–∞–ª—å",
            3: "–ú–∞—Ä—Ç",
            4: "–ê–ø—Ä–µ–ª—å",
            5: "–ú–∞–π",
            6: "–ò—é–Ω—å",
            7: "–ò—é–ª—å",
            8: "–ê–≤–≥—É—Å—Ç",
            9: "–°–µ–Ω—Ç—è–±—Ä—å",
            10: "–û–∫—Ç—è–±—Ä—å",
            11: "–ù–æ—è–±—Ä—å",
            12: "–î–µ–∫–∞–±—Ä—å",
        }
        return months.get(month, "")

    def select_day_events(self, year: int, month: int):
        """–í—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏—è"""
        try:
            day = IntPrompt.ask("–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å")
            if day < 1 or day > 31:
                self.console.print("[red]–ù–µ–≤–µ—Ä–Ω—ã–π –¥–µ–Ω—å![/red]")
                return

            date_str = f"{year}-{month:02d}-{day:02d}"
            events = self.calendar_manager.get_events_by_date(date_str)

            self.clear_screen()
            self.console.print(
                Panel(f"[bold blue]üìÖ –°–æ–±—ã—Ç–∏—è –Ω–∞ {date_str}[/bold blue]", expand=False)
            )

            if not events:
                self.console.print("[yellow]–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å[/yellow]")
            else:
                table = Table(show_header=True, header_style="bold magenta")
                table.add_column("–ù–∞–∑–≤–∞–Ω–∏–µ", style="cyan")
                table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="white")
                table.add_column("–¢–∏–ø", style="yellow")

                for event in events:
                    event_type_style = {
                        "personal": "blue",
                        "work": "red",
                        "holiday": "green",
                    }.get(event.event_type, "white")
                    type_text = (
                        f"[{event_type_style}]{event.event_type}[/{event_type_style}]"
                    )

                    table.add_row(event.title, event.description or "-", type_text)

                self.console.print(table)

            # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
            add_event = Prompt.ask("–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å? (y/N)", default="n")
            if add_event.lower() == "y":
                title = Prompt.ask("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è")
                description = Prompt.ask("–û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", default="")
                event_type = Prompt.ask(
                    "–¢–∏–ø —Å–æ–±—ã—Ç–∏—è",
                    choices=["personal", "work", "holiday"],
                    default="personal",
                )

                self.calendar_manager.add_event(
                    title, date_str, description, event_type
                )
                self.console.print("[green]‚úÖ –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ![/green]")

        except Exception as e:
            self.console.print(f"[red]–û—à–∏–±–∫–∞: {e}[/red]")

    # ==================== Games ====================
    def show_games_menu(self):
        while True:
            self.clear_screen()
            self.console.print(Panel("[bold red]üéÆ –ò–≥—Ä—ã[/bold red]", expand=False))
            self.console.print("1. ‚ùå‚≠ï –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏")
            self.console.print("2. üß± –¢–µ—Ç—Ä–∏—Å (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)")
            self.console.print("0. üîô –ù–∞–∑–∞–¥")

            choice = Prompt.ask("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É", choices=["0", "1", "2"])

            if choice == "0":
                break
            elif choice == "1":
                self.play_tic_tac_toe()
            elif choice == "2":
                self.play_tetris_demo()

            if choice != "0":
                Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

    def play_tic_tac_toe(self):
        self.clear_screen()
        self.console.print(
            Panel("[bold green]‚ùå‚≠ï –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏[/bold green]", expand=False)
        )

        game = TicTacToe()

        while True:
            self.console.print(game.display_board())

            winner = game.check_winner()
            if winner:
                if winner == "Draw":
                    self.console.print("[yellow]–ù–∏—á—å—è![/yellow]")
                else:
                    self.console.print(f"[bold green]–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner}[/bold green]")
                break

            try:
                position = IntPrompt.ask(
                    f"–ò–≥—Ä–æ–∫ {game.current_player}, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é (0-8)"
                )
                if game.make_move(position):
                    game.switch_player()
                else:
                    self.console.print("[red]–ù–µ–≤–µ—Ä–Ω—ã–π —Ö–æ–¥! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.[/red]")
            except ValueError:
                self.console.print("[red]–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 8[/red]")

        play_again = Prompt.ask("–°—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑? (y/N)", default="n")
        if play_again.lower() == "y":
            self.play_tic_tac_toe()

    def play_tetris_demo(self):
        self.clear_screen()
        self.console.print(
            Panel("[bold cyan]üß± –¢–µ—Ç—Ä–∏—Å (–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è)[/bold cyan]", expand=False)
        )

        tetris = SimpleTetris()
        tetris.current_piece = tetris.create_random_piece()

        self.console.print(tetris.display_board())
        self.console.print(
            "[yellow]–≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¢–µ—Ç—Ä–∏—Å–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏[/yellow]"
        )
        self.console.print("–í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –±—É–¥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã:")
        self.console.print("‚Ä¢ –ü–∞–¥–µ–Ω–∏–µ —Ñ–∏–≥—É—Ä")
        self.console.print("‚Ä¢ –í—Ä–∞—â–µ–Ω–∏–µ —Ñ–∏–≥—É—Ä")
        self.console.print("‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ª–∏–Ω–∏–π")
        self.console.print("‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –æ—á–∫–æ–≤")

    # ==================== Password Generator ====================
    def show_password_generator(self):
        while True:
            self.clear_screen()
            self.console.print(
                Panel("[bold purple]üîê –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π[/bold purple]", expand=False)
            )
            self.console.print("1. üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª–∏")
            self.console.print("2. üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è")
            self.console.print("0. üîô –ù–∞–∑–∞–¥")

            choice = Prompt.ask("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", choices=["0", "1", "2"])

            if choice == "0":
                break
            elif choice == "1":
                self.generate_passwords()
            elif choice == "2":
                self.check_password_strength()

            if choice != "0":
                Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

    def generate_passwords(self):
        self.console.print("\n[bold]üé≤ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª–µ–π[/bold]")

        try:
            count = IntPrompt.ask("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–æ–ª–µ–π", default=5)
            length = IntPrompt.ask("–î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è", default=12)

            use_uppercase = (
                Prompt.ask("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã? (Y/n)", default="y").lower()
                == "y"
            )
            use_lowercase = (
                Prompt.ask("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã? (Y/n)", default="y").lower()
                == "y"
            )
            use_digits = (
                Prompt.ask("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ü–∏—Ñ—Ä—ã? (Y/n)", default="y").lower() == "y"
            )
            use_special = (
                Prompt.ask(
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã? (Y/n)", default="y"
                ).lower()
                == "y"
            )

            passwords = self.password_generator.generate_multiple_passwords(
                count=count,
                length=length,
                use_uppercase=use_uppercase,
                use_lowercase=use_lowercase,
                use_digits=use_digits,
                use_special=use_special,
            )

            self.console.print("\n[bold]–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏:[/bold]")
            for i, password in enumerate(passwords, 1):
                self.console.print(f"{i}. {password}")

        except Exception as e:
            self.console.print(f"[red]–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª–µ–π: {e}[/red]")

    def check_password_strength(self):
        self.console.print("\n[bold]üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è[/bold]")
        password = Prompt.ask("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")

        if not password:
            self.console.print("[yellow]–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º[/yellow]")
            return

        result = self.password_generator.check_password_strength(password)

        self.console.print(f"\n[bold]–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:[/bold]")
        self.console.print(
            f"–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å: [bold]{result['strength']}[/bold] ({result['score']}/5)"
        )

        if result["feedback"]:
            self.console.print("\n[bold]–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:[/bold]")
            for feedback in result["feedback"]:
                self.console.print(f"‚Ä¢ {feedback}")
        else:
            self.console.print("[green]‚úÖ –ü–∞—Ä–æ–ª—å –Ω–∞–¥–µ–∂–Ω—ã–π![/green]")

    # ==================== Main Loop ====================
    def run(self):
        while True:
            self.clear_screen()
            self.show_main_menu()

            try:
                choice = Prompt.ask(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª", choices=["0", "1", "2", "3", "4", "5"]
                )

                if choice == "0":
                    self.console.print(
                        "[blue]üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ shoriext![/blue]"
                    )
                    break
                elif choice == "1":
                    self.show_task_tracker_menu()
                elif choice == "2":
                    self.show_weather()
                elif choice == "3":
                    self.show_calendar_menu()
                elif choice == "4":
                    self.show_games_menu()
                elif choice == "5":
                    self.show_password_generator()

            except KeyboardInterrupt:
                self.console.print("\n\n[blue]üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è![/blue]")
                break
            except Exception as e:
                self.console.print(f"[red]–û—à–∏–±–∫–∞: {e}[/red]")
                Prompt.ask("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")


if __name__ == "__main__":
    ui = ShoriextUI()
    ui.run()
